package anytime_test

import (
	"fmt"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/timematic/anytime"
)

var anytime_layouts = map[string]string{ // map[value]layout
	// Multiple Date Layout
	"1970-01-01":      "2006-01-02",
	"1970-Jan-01":     "2006-Jan-02",
	"1970/01/01":      "2006/01/02",
	"1970/Jan/01":     "2006/Jan/02",
	"1970/January/01": "2006/January/02",
	"01/Jan/1970":     "02/Jan/2006",
	"Jan/01/1970":     "Jan/02/2006",
	"19700101":        "20060102",
	"1970-01-01T":     "2006-01-02T",
	"1970.001":        "2006.002",
	"1970-001":        "2006-002",
	"1970001":         "2006002",

	// Multiple Zone Layout
	"1970-01-01Z":                 "2006-01-02Z07:00",
	"1970-01-01+05":               "2006-01-02-07",
	"1970-01-01T+05":              "2006-01-02T-07",
	"1970-01-01 +05":              "2006-01-02 -07",
	"1970-01-01 +05:00":           "2006-01-02 -07:00",
	"1970-01-01 +0500":            "2006-01-02 -0700",
	"1970-01-01 -05":              "2006-01-02 -07",
	"1970-01-01 -05:00":           "2006-01-02 -07:00",
	"1970-01-01 -0500":            "2006-01-02 -0700",
	"1970-01-01 UTC":              "2006-01-02 MST",
	"1970-01-01 America/New_York": "", // not supported by time.Parse
	"1970-01-01 +5":               "", // not supported by time.Parse
	"1970-01-01 +5:0":             "", // not supported by time.Parse
	"1970-01-01 -8:00":            "", // not supported by time.Parse

	// Multiple Time Layout
	"1970-01-01 00":                   "2006-01-02 15",
	"1970-01-01 00:00":                "2006-01-02 15:04",
	"1970-01-01 00:00:00":             "2006-01-02 15:04:05",
	"1970-01-01 00:00:00.1":           "2006-01-02 15:04:05.0",
	"1970-01-01 00:00:00.12":          "2006-01-02 15:04:05.00",
	"1970-01-01 00:00:00.123":         "2006-01-02 15:04:05.000",
	"1970-01-01 00:00:00.1234":        "2006-01-02 15:04:05.0000",
	"1970-01-01 00:00:00.12345":       "2006-01-02 15:04:05.00000",
	"1970-01-01 00:00:00.123456":      "2006-01-02 15:04:05.000000",
	"1970-01-01 00:00:00.1234567":     "2006-01-02 15:04:05.0000000",
	"1970-01-01 00:00:00.12345678":    "2006-01-02 15:04:05.00000000",
	"1970-01-01 00:00:00.123456789":   "2006-01-02 15:04:05.000000000",
	"1970-01-01 0":                    "2006-01-02 15",
	"1970-01-01 0:1":                  "2006-01-02 15:4",
	"1970-01-01 0:1:2":                "2006-01-02 15:4:5",
	"1970-01-01 0:1:02":               "2006-01-02 15:4:05",
	"1970-01-01 0001":                 "2006-01-02 1504",
	"1970-01-01 000102":               "2006-01-02 150405",
	"1970-01-01 000102.1":             "2006-01-02 150405.0",
	"1970-01-01 10:00:00.123456789AM": "2006-01-02 03:04:05.000000000PM",
	"1970-01-01 10:00:00.123456789PM": "2006-01-02 03:04:05.000000000PM",

	// Multiple Date/Time Separator
	"1970-01-01T00": "2006-01-02T15",
	"1970-01-01t00": "2006-01-02t15",
	"1970-01-01_00": "2006-01-02_15",

	// Some Special Layout
	"Wed Dec  3 07:37:16 1997":       "Mon Jan _2 15:04:05 2006",     // time.ANSIC
	"Wed Dec  3 07:37:16 PST 1997":   "Mon Jan _2 15:04:05 MST 2006", // time.UnixDate
	"02 Jan 70 00:01 UTC":            "02 Jan 06 15:04 MST",
	"Mon, 02-Jan-70 00:01:02 UTC":    "Mon, 02-Jan-06 15:04:05 MST",
	"Mon Jan 02 00:01:02 -0500 1970": "Mon Jan 02 15:04:05 -0700 2006",
	"Wed Dec 17 07:37:16 1997 PST":   "Mon Jan 02 15:04:05 2006 MST", // pg style
	"Dec 17 07:37:16 1997 PST":       "Jan 02 15:04:05 2006 MST",     // pg style
	"19700102T030405.123456":         "20060102T150405.000000",
}

func TestAnytimeFormats(t *testing.T) {
	for str, layout := range anytime_layouts {
		if layout == "" { // supported by antime.Parse, not by time.Parse
			_, err := anytime.Parse(str)
			assert.Nil(t, err)
			continue
		}

		expect, err := time.Parse(layout, str)
		assert.Nil(t, err)

		date, err := anytime.Parse(str)
		assert.Nil(t, err)

		assert.True(t, expect.Equal(date), fmt.Sprintf("layout=%s, str=%s, expect=%s, date=%s", layout, str, expect, date))
	}
}
